import os

def format_emotivoice_input(speaker_id, 
                            emotion_prompt, 
                            original_text_filepath, 
                            phoneme_filepath, 
                            output_filepath):
    """
    Combines original text and phonemes with speaker/emotion info 
    for EmotiVoice inference.

    Args:
        speaker_id (str or int): The desired speaker ID (e.g., "8051", 1024).
        emotion_prompt (str): The desired emotion/style prompt (e.g., "Happy").
        original_text_filepath (str): Path to the file containing original sentences, 
                                       one per line.
        phoneme_filepath (str): Path to the file containing corresponding phonemes 
                                (output of frontend.py), one per line.
        output_filepath (str): Path where the formatted output file will be saved.

    Returns:
        bool: True if successful, False otherwise.
    """
    try:
        # Read lines from both files
        with open(original_text_filepath, 'r', encoding='utf-8') as f_text, \
             open(phoneme_filepath, 'r', encoding='utf-8') as f_phoneme:
            
            original_lines = f_text.readlines()
            phoneme_lines = f_phoneme.readlines()

        # Basic check for line count mismatch
        if len(original_lines) != len(phoneme_lines):
            print(f"Error: Line count mismatch between "
                  f"'{original_text_filepath}' ({len(original_lines)}) and "
                  f"'{phoneme_filepath}' ({len(phoneme_lines)}).")
            return False

        # Prepare formatted lines
        formatted_lines = []
        for i in range(len(original_lines)):
            text_line = original_lines[i].strip()
            phoneme_line = phoneme_lines[i].strip()

            # Skip empty lines if necessary
            if not text_line or not phoneme_line:
                print(f"Warning: Skipping empty line pair at index {i}.")
                continue
                
            # Construct the formatted line
            # Format: <speaker>|<prompt>|<phonemes>|<original_text>
            formatted_line = f"{speaker_id}|{emotion_prompt}|{phoneme_line}|{text_line}"
            formatted_lines.append(formatted_line)

        # Write the formatted lines to the output file
        with open(output_filepath, 'w', encoding='utf-8') as f_out:
            for line in formatted_lines:
                f_out.write(line + '\n')

        print(f"Successfully created formatted file: '{output_filepath}'")
        return True

    except FileNotFoundError as e:
        print(f"Error: File not found - {e}")
        return False
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return False

# --- Example Usage ---

# --- Configuration ---
SPEAKER = "8051"  # Replace with a valid speaker ID from EmotiVoice's list
EMOTION = "Happy"  # Replace with desired emotion (e.g., Neutral, Sad, Angry)

# --- File Paths ---
# Assumes your files are in a 'data' subdirectory relative to this script
DATA_DIR = "data" 
ORIGINAL_TEXT_FILE = os.path.join(DATA_DIR, "my_input.txt") # Your original text
PHONEME_ONLY_FILE = os.path.join(DATA_DIR, "my_phonemes_only.txt") # Output from frontend.py
FINAL_TTS_INPUT_FILE = os.path.join(DATA_DIR, "my_text_for_tts.txt") # File for inference script

# --- Create dummy input files for demonstration if they don't exist ---
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)
if not os.path.exists(ORIGINAL_TEXT_FILE):
    with open(ORIGINAL_TEXT_FILE, "w") as f:
        f.write("Hello world.\n")
        f.write("This is a test using EmotiVoice.\n")
if not os.path.exists(PHONEME_ONLY_FILE):
     with open(PHONEME_ONLY_FILE, "w") as f:
         # Replace with actual phonemes generated by frontend.py for the lines above
         f.write("<sos/eos> [HH AH0 L OW1] engsp1 [W ER1 L D] . <sos/eos>\n") 
         f.write("<sos/eos> [DH IH1 S] engsp1 [IH1 Z] engsp1 [AH0] engsp1 [T EH1 S T] engsp1 [Y UW1 Z IH0 NG] engsp1 [IH0] [M OW1] [T AH0] [V OY1 S] . <sos/eos>\n")


# --- Run the function ---
success = format_emotivoice_input(
    speaker_id=SPEAKER,
    emotion_prompt=EMOTION,
    original_text_filepath=ORIGINAL_TEXT_FILE,
    phoneme_filepath=PHONEME_ONLY_FILE,
    output_filepath=FINAL_TTS_INPUT_FILE
)

if success:
    print("Formatting complete. You can now use " 
          f"'{FINAL_TTS_INPUT_FILE}' with the inference script.")
    # Example inference command reminder:
    # print(f"\nRun inference with:\n"
    #       f"TEXT_FILE={FINAL_TTS_INPUT_FILE}\n"
    #       f"python inference_am_vocoder_joint.py \\"
    #       f"    --logdir prompt_tts_open_source_joint \\"
    #       f"    --config_folder config/joint \\"
    #       f"    --checkpoint g_00140000 \\"
    #       f"    --test_file $TEXT_FILE")
else:
    print("Formatting failed.")